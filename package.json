{
  "name": "cli_auto_tools",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "help": "node scripts/print-scripts.cjs",
    "sum:jira": "node scripts/sum_jira.cjs",
    "clear:prompt": "node scripts/clear_prompts.cjs",
    "sql:exec": "node ./scripts/sql_exec.cjs",
    "mcp:sum:jira": "node scripts/mcp_sum_jira_print.cjs"
  },
  "scriptsMeta": {
    "help": {
      "description": "显示所有可用的 npm 脚本及其说明",
      "env": "both",
      "prodSafe": true,
      "tags": [
        "docs",
        "meta"
      ],
      "AI_actions": "1) 阅读输出的“已支持的自动化流程/指令”列表，定位与当前任务最匹配的工具。\n2) 打开所选指令的描述与 AI_actions，确认输入、产物与后续校验方式。\n3) 在本地 Windows 11 + git bash 中执行该指令；若为生产相关，仅通过项目提供的封装脚本触发，避免直接在生产机上运行本地开发脚本。\n4) 按所选指令的 AI_actions 完成后续操作与验证（如检查产物目录、运行最小化校验、生成变更说明等）。\n5) 若当前任务均无适配的自动化流程，则不要强行套用；按原始提示词的手动流程继续执行。\n6) 如需再次查看或切换工具，可重新执行 `npm run help` 并重复上述步骤。"
    },
    "sum:jira": {
      "description": "根据工单号总结知识库。根据Jira工单号生成知识库文章的总结提示词，之后按照提示词文件生成总结。（仅适用于工单文件已经下载的情况）",
      "usage": "npm run sum:jira {工单号}",
      "AI_actions": "1) 如果用户说需要总结工单{工单号}时，先在 `E:\\download\\` 和 `D:\\Work_Living\\` 目录搜索是否存在 `{工单号}.xml` 文件。只有工单文件存在才使用这个npm指令。否则请换成执行mcp:sum:jira的行动序列\n2) 【执行这个npm指令】 npm run sum:jira {工单号}\n3) 执行后根据返回信息获取“提示词文件路径”（包含已拼接的工单内容）。在 git bash 中可用 `test -s <路径>` 校验文件存在且非空；若需与 Windows 原生工具交互，可用 `cygpath -w <路径>` 转换为 Windows 路径。特别注意：当调用你自己的文件工具（如 ReadFile, WriteFile 等）时，必须提供工具所要求的绝对路径格式。例如，在Windows环境下，应使用 `E:\\AI\\git_repo\\CLI_auto_tools\\prompt\\temp\\CS-370665_prompt.md` 这样的标准路径，否则将导致工具执行失败。\n4) 打开并快速审阅文件内容，确认工单标题、描述、评论等信息已正确拼接；对敏感信息进行必要脱敏与润色。\n5) 如需补充上下文（例如期望产出格式、读者对象、边界条件），请直接编辑该提示词文件并保存，保留原有工单关键信息不丢失。\n6) 在后续步骤中，前往 `npm run help` 选择与当前目标匹配的自动化指令（如总结、评审、生成变更说明等），并在支持的情况下将“提示词文件路径”作为输入参数传入该指令。\n7) 若一次性处理多个工单，请确认文件内容是否按预期顺序与分隔格式拼接；必要时拆分为多个提示词文件分别使用。\n8) 若未生成路径或路径无效，请复核输入参数与权限后重试该指令；持续失败时，记录报错信息并向开发者反馈以便排查。",
      "tags": [
        "jira",
        "summary",
        "prompt"
      ]
    },
    "mcp:sum:jira": {
      "description": "根据工单号总结知识库。根据Jira工单号获取工单内容，然后按照模板规范对工单进行总结，并写入notion中。（仅适用于工单文件未下载的情况。)",
      "usage": "npm run mcp:sum:jira",
      "AI_actions": "1) 总结工单{工单号}前，先在 `E:\\download\\` 和 `D:\\Work_Living\\` 目录搜索是否存在 `{工单号}.xml` 文件。2) 若文件不存在，调用mcp_chrome的浏览器工具访问 http://jira.mailtech.cn/si/jira.issueviews:issue-xml/{工单号}/{工单号}.xml 并获取其XML内容；若文件存在，则不执行mcp:sum:jira的行动序列，换成执行sum:jira的行动序列。\n3) 【执行这个npm指令】 npm run mcp:sum:jira\n4) 指令将返回总结的模板规范。在生成最终文档前，如果发现缺少必要信息，请先与用户沟通补齐。\n5) 根据模板和XML内容输出markdown格式的知识库文档，并请明确咨询用户，确认是否满意，并告知修正完成后将会写入一个notion页面中。若用户回复不满意，根据用户的反馈意见进行修改并重新输出。\n6) 若用户满意，则调用 Notion mcp的页面创建工具，将 Markdown 格式的笔记内容写入一个新的私有页面，页面标题使用总结结果中的标题。\n7) 如果用户提供了多个工单，请将任务串行处理，一次一个。\n8) 若操作失败，请复核输入参数与权限后重试该指令；持续失败时，记录报错信息并向开发者反馈。",
      "tags": [
        "jira",
        "summary",
        "prompt",
        "mcp"
      ]
    },
    "clear:prompt": {
      "description": "清理超过7天的临时提示词文件。",
      "usage": "npm run clear:prompt",
      "AI_actions": "此指令会删除 prompt/temp 目录下最后修改时间超过7天的 `*_prompt.md` 文件，以防临时文件堆积。完成后，我会告知您清理结果。",
      "tags": [
        "maintenance",
        "cleanup"
      ]
    },
    "sql:exec": {
      "description": "执行一条SQL语句并返回结果。可选择指定数据库名。",
      "usage": "npm run sql:exec [{数据库名}] \"SQL语句\"",
      "env": "dev",
      "prodSafe": false,
      "tags": [
        "database",
        "sql"
      ],
      "AI_actions": "1) 执行 `npm run sql:exec [{数据库名}] \"SQL语句\"`。记录单行SQL语句备用。\n2) 将脚本返回的JSON结果转换为Markdown表格并输出。\n3) 对记录的SQL语句进行逻辑和结构分析，向用户解释其工作原理。\n4) 如果用户提出修改意见，请根据意见更新SQL语句。\n5) 使用更新后的SQL重新执行步骤1-4。\n6) 等待用户的下一步指示。"
    }
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "mysql2": "^3.14.3"
  }
}
